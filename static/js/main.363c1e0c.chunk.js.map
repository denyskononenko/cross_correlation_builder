{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["a","b","makeData","par_a","par_b","x","y","data","crs_corr","sequence_a","sequence_b","temp","i","length","j","push","crossCorrelation","name","pv","amt","RenderLineChart","state","changeGraph","params","_this","setState","react_default","createElement","es6","width","height","this","type","dataKey","stroke","strokeDasharray","wrapperStyle","top","right","backgroundColor","border","borderRadius","lineHeight","React","Component","Input","className","id","props","defaultValue","value","MainContent","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","reconstructGraphic","bind","assertThisInitialized","graphic","createRef","new_a","document","getElementById","split","new_b","console","log","concat","new_data","current","App_Input","join","Button_default","variant","onClick","App_RenderLineChart","ref","App","App_MainContent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.363c1e0c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend} from 'recharts';\n\n//const dataExmpl = [{name: '1', y: 400, pv: 2400, amt: 2400}, {name: '2', y: 500, pv: 2400, amt: 2400}];\nconst a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfunction crossCorrelation(sequence_a, sequence_b){\n  let crs_corr = [];\n  let temp = 0;\n  for(let i = 0; i < sequence_a.length; i++){\n    for(let j = 0; j < sequence_a.length - i; j++){\n      temp += sequence_a[i + j]*sequence_b[j];\n    }\n    crs_corr.push(temp);\n    temp = 0;\n  }\n  return crs_corr;\n}\n\nfunction dataEl(x, y){\n  return {name: x, y: y, pv: 2400, amt: 2400}\n}\n\nfunction makeData(par_a, par_b){\n    let data = [];\n    let crs_corr = crossCorrelation(par_a, par_b)\n    for(let i = 0; i <= crs_corr.length; i++){\n      data.push(dataEl(i, crs_corr[i]));\n    }\n    return data\n}\n\nclass RenderLineChart extends React.Component {\n    state = {\n        data: makeData(a, b)\n    };\n    changeGraph = (params) => {\n        this.setState({data: params});\n    };\n\n    render() {\n        return(\n            <LineChart width={800} height={400} data={this.state.data}>\n                <Line type=\"monotone\" dataKey=\"y\" stroke=\"#fb4660\"/>\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n                <Legend width={100} wrapperStyle={{ top: 40, right: 20, backgroundColor: '#0F1826', border: '1px solid #d5d5d5', borderRadius: 3, lineHeight: '40px' }} />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip/>\n            </LineChart>\n        );\n    }\n}\n\nclass Input extends React.Component {\n    render() {\n        return(\n            <div className=\"input-contatiner\">\n                <input id={this.props.id} type=\"text\" defaultValue={this.props.value}/>\n                <p>Sequence {this.props.name}</p>\n            </div>\n        );\n    }\n}\n\nclass MainContent extends React.Component {\n    constructor(props){\n        super(props)\n        this.reconstructGraphic = this.reconstructGraphic.bind(this);\n        this.graphic = React.createRef();\n    }\n\n    reconstructGraphic(){\n        let new_a = document.getElementById(\"first-seq\").value.split(' ');\n        let new_b = document.getElementById(\"second-seq\").value.split(' ');\n        console.log(`first seq: ${new_a}`);\n        console.log(`second seq: ${new_b}`);\n        let new_data =  makeData(new_a, new_b);\n        this.graphic.current.changeGraph(new_data);\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n                <h1>Cross correlation function calculator</h1>\n                <header className=\"App-header\">\n                    <div className=\"row\">\n                        <div className=\"column\">\n                            <Input id=\"first-seq\" name=\"a\" value={a.join(' ')}/>\n                        </div>\n                        <div className=\"column\">\n                            <Input id=\"second-seq\" name=\"b\" value={b.join(' ')}/>\n                        </div>\n                        <div className=\"column\">\n                            <Button variant=\"contained\" onClick={this.reconstructGraphic}>Calculate</Button>\n                        </div>\n                    </div>\n                    <RenderLineChart ref={this.graphic}/>\n                </header>\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n  render(){\n    return (\n      <MainContent/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}